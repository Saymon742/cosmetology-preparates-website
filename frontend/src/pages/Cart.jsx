import React, { useState, useEffect } from 'react';
import { useTranslation } from 'react-i18next';
import axios from 'axios';
import './Cart.css';

const Cart = () => {
  const { t, i18n } = useTranslation();
  const [cartItems, setCartItems] = useState([]);
  const [products, setProducts] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchCart();
  }, []);

  const fetchCart = async () => {
    try {
      setLoading(true);
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
      const cartResponse = await axios.get('http://localhost:8000/cart/');
      const cartData = cartResponse.data;
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      const productsResponse = await axios.get('http://localhost:8000/products/');
      setProducts(productsResponse.data);
      
      // –°–æ–ø–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–¥—É–∫—Ç–∞—Ö
      const itemsWithDetails = cartData.map(cartItem => {
        const product = productsResponse.data.find(p => p.id === cartItem.product_id);
        return {
          ...cartItem,
          product: product
        };
      });
      
      setCartItems(itemsWithDetails);
    } catch (error) {
      console.error('Error fetching cart:', error);
      // –î–ª—è —Ç–µ—Å—Ç–∞ - –¥–µ–º–æ –¥–∞–Ω–Ω—ã–µ
      setCartItems([
        {
          product_id: 1,
          quantity: 2,
          product: {
            id: 1,
            name_uk: "–†–µ—Ç—ñ–Ω–æ–ª Complex 1%",
            name_ru: "–†–µ—Ç–∏–Ω–æ–ª Complex 1%",
            price: 1800,
            volume: "30 –º–ª"
          }
        },
        {
          product_id: 2,
          quantity: 1,
          product: {
            id: 2,
            name_uk: "–ì—ñ–∞–ª—É—Ä–æ–Ω–æ–≤–∞ –ö–∏—Å–ª–æ—Ç–∞",
            name_ru: "–ì–∏–∞–ª—É—Ä–æ–Ω–æ–≤–∞—è –ö–∏—Å–ª–æ—Ç–∞",
            price: 1500,
            volume: "50 –º–ª"
          }
        }
      ]);
    } finally {
      setLoading(false);
    }
  };

  const updateQuantity = async (productId, newQuantity) => {
    if (newQuantity < 1) return;
    
    try {
      // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –ø–µ—Ä–µ–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
      await axios.post('http://localhost:8000/cart/add/', {
        product_id: productId,
        quantity: newQuantity
      });
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setCartItems(prev => prev.map(item => 
        item.product_id === productId 
          ? { ...item, quantity: newQuantity }
          : item
      ));
    } catch (error) {
      console.error('Error updating quantity:', error);
    }
  };

  const removeFromCart = async (productId) => {
    try {
      // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ 0
      await axios.post('http://localhost:8000/cart/add/', {
        product_id: productId,
        quantity: 0
      });
      
      // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      setCartItems(prev => prev.filter(item => item.product_id !== productId));
    } catch (error) {
      console.error('Error removing from cart:', error);
    }
  };

  const getProductName = (product) => {
    return i18n.language === 'uk' ? product.name_uk : product.name_ru;
  };

  const calculateTotal = () => {
    return cartItems.reduce((total, item) => {
      return total + (item.product?.price || 0) * item.quantity;
    }, 0);
  };

  const getTotalItems = () => {
    return cartItems.reduce((total, item) => total + item.quantity, 0);
  };

  if (loading) {
    return (
      <div className="cart-loading">
        <div className="loading-icon">üõí</div>
        <h2>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∫–æ—Ä–∑–∏–Ω–∏...</h2>
      </div>
    );
  }

  return (
    <div className="cart-page">
      <section className="cart-hero">
        <div className="container">
          <div className="hero-content">
            <p>–í–∞—à—ñ –æ–±—Ä–∞–Ω—ñ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∏</p>
          </div>
        </div>
      </section>

      <section className="cart-content">
        <div className="container">
          {cartItems.length === 0 ? (
            <div className="cart-empty">
              <div className="empty-icon">üõí</div>
              <h3>–ö–æ—Ä–∑–∏–Ω–∞ –ø–æ—Ä–æ–∂–Ω—è</h3>
              <p>–î–æ–¥–∞–π—Ç–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∏ –∑ –∫–∞—Ç–∞–ª–æ–≥—É, —â–æ–± –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è</p>
              <a href="/products" className="btn btn-primary">
                –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –∫–∞—Ç–∞–ª–æ–≥—É
              </a>
            </div>
          ) : (
            <div className="cart-layout">
              <div className="cart-items">
                <div className="cart-header">
                  <h2>–¢–æ–≤–∞—Ä–∏ –≤ –∫–æ—Ä–∑–∏–Ω—ñ ({getTotalItems()})</h2>
                </div>
                
                {cartItems.map(item => (
                  <div key={item.product_id} className="cart-item">
                    <div className="item-image">
                      ‚öóÔ∏è
                    </div>
                    
                    <div className="item-details">
                      <h3 className="item-title">
                        {item.product ? getProductName(item.product) : `–¢–æ–≤–∞—Ä #${item.product_id}`}
                      </h3>
                      <div className="item-volume">
                        {item.product?.volume}
                      </div>
                      <div className="item-price">
                        {item.product?.price} ‚Ç¥
                      </div>
                    </div>
                    
                    <div className="item-controls">
                      <div className="quantity-controls">
                        <button 
                          onClick={() => updateQuantity(item.product_id, item.quantity - 1)}
                          disabled={item.quantity <= 1}
                          className="quantity-btn"
                        >
                          -
                        </button>
                        <span className="quantity">{item.quantity}</span>
                        <button 
                          onClick={() => updateQuantity(item.product_id, item.quantity + 1)}
                          className="quantity-btn"
                        >
                          +
                        </button>
                      </div>
                      
                      <div className="item-total">
                        {(item.product?.price || 0) * item.quantity} ‚Ç¥
                      </div>
                      
                      <button 
                        onClick={() => removeFromCart(item.product_id)}
                        className="remove-btn"
                      >
                        üóëÔ∏è
                      </button>
                    </div>
                  </div>
                ))}
              </div>
              
              <div className="cart-summary">
                <div className="summary-card">
                  <h3>–†–∞–∑–æ–º</h3>
                  
                  <div className="summary-row">
                    <span>–¢–æ–≤–∞—Ä–∏ ({getTotalItems()})</span>
                    <span>{calculateTotal()} ‚Ç¥</span>
                  </div>
                  
                  <div className="summary-row">
                    <span>–î–æ—Å—Ç–∞–≤–∫–∞</span>
                    <span className="free-shipping">–ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–æ</span>
                  </div>
                  
                  <div className="summary-divider"></div>
                  
                  <div className="summary-total">
                    <span>–î–æ —Å–ø–ª–∞—Ç–∏:</span>
                    <span className="total-amount">{calculateTotal()} ‚Ç¥</span>
                  </div>
                  
                  <button className="checkout-btn btn-primary">
                    –û—Ñ–æ—Ä–º–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è
                  </button>
                  
                  <div className="shipping-info">
                    <p> –ë–µ–∑–∫–æ—à—Ç–æ–≤–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –£–∫—Ä–∞—ó–Ω—ñ</p>
                    <p> –¢–µ—Ä–º—ñ–Ω –≤–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—è: 1-3 –¥–Ω—ñ</p>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </section>
    </div>
  );
};

export default Cart;